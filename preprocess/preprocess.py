# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZOpuV8qfoEjGIPMOGZXjLdb36pfGxn9V
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import pandas as pd
import numpy as np
import datetime as dt
import warnings
warnings.filterwarnings('ignore')
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import matplotlib as mpl
import matplotlib.font_manager as fm
plt.rc('font', family='NanumBarunGothic') 
mpl.rcParams['axes.unicode_minus'] = False
import random
random.seed(777)

# 공휴일 api 가져오기
import requests
from urllib import parse
from bs4 import BeautifulSoup
from datetime import datetime

def missing_values_table(df):
        mis_val = df.isnull().sum()
        mis_val_percent = 100 * df.isnull().sum() / len(df)
        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)
        
        mis_val_table_ren_columns = mis_val_table.rename(
        columns = {0 : 'Missing Values', 1 : '% of Total Values'})
        
        mis_val_table_ren_columns = mis_val_table_ren_columns[
            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(
        '% of Total Values', ascending=False).round(1)
        
        print ("Your selected dataframe has " + str(df.shape[1]) + " columns.\n"      
            "There are " + str(mis_val_table_ren_columns.shape[0]) +
              " columns that have missing values.")
        
        return mis_val_table_ren_columns

# 공공데이터포털, 한국천문연구원_특일 정보의 공휴일 데이터 가져오기 함수
def getHoliday(year: int) -> pd.DataFrame:
    url = "http://apis.data.go.kr/B090041/openapi/service/SpcdeInfoService/getRestDeInfo"
    # api_key_utf8 = "qu9mUBECqmbjV1RDmrqw%2FtW8i3%2BF52mw4W5EogF4Yz5227TfAhQsC3gz7hFxUbhBLgXXIN6prRQh5Oq2hUYF4A%3D%3D"
    api_key_decode = "qu9mUBECqmbjV1RDmrqw/tW8i3+F52mw4W5EogF4Yz5227TfAhQsC3gz7hFxUbhBLgXXIN6prRQh5Oq2hUYF4A=="

    params = {
        "ServiceKey": api_key_decode,
        "solYear": year,
        "numOfRows": 100
    }

    response = requests.get(url, params=params)
    xml = BeautifulSoup(response.text, "lxml")
    items = xml.find('items')
    item_list = []
    for item in items:
        item_dict = {
            "이름": item.find("datename").text.strip(),
            "날짜": datetime.strptime(item.find("locdate").text.strip(), '%Y%m%d')
        }
        item_list.append(item_dict)

    return pd.DataFrame(item_list)

if __name__ == "__main__":
  food_waste = pd.read_csv(os.path.join('..','raw', '제공데이터', '01_음식물쓰레기_FOOD_WASTE_210811_update.CSV'), encoding='CP949')
  dates = pd.date_range('2021-03-20', periods=1, freq='D').strftime("%Y-%m-%d").tolist()
  group1 = food_waste.groupby(['base_date','city','emd_nm']).sum().reset_index()
  dates_list=[]
  for i in range(len(dates)):
    dates_list.append(dates[i])

  missing_emd_제주 = ['건입동','용담1동','이호동','일도1동']
  missing_list=[]
  for j in range(len(missing_emd_제주)):
    for i in range(len(dates_list)):
      missing_list.append([dates_list[i],'제주시',missing_emd_제주[j],np.NaN,np.NaN,np.NaN])
  missing = pd.DataFrame(missing_list,columns=group1.columns)

  group2 = group1.append(missing)
  group2.base_date=pd.to_datetime(group2.base_date)
  group2 = group2.sort_values(by=['base_date','city','emd_nm']).reset_index(drop=True)

  dates = pd.date_range('2020-10-23', periods=1, freq='D').strftime("%Y-%m-%d").tolist()
  dates_list=[]

  for i in range(len(dates)):
    dates_list.append(dates[i])

  missing_emd_서귀포 = ['남원읍','대륜동','대정읍','대천동','동홍동','서홍동','성산읍','송산동','안덕면','영천동','예래동','정방동','중문동','중앙동','천지동','표선면','효돈동']
  missing_list=[]
  for j in range(len(missing_emd_서귀포)):
    for i in range(len(dates_list)):
      missing_list.append([dates_list[i],'서귀포시',missing_emd_서귀포[j],np.NaN,np.NaN,np.NaN])
  missing = pd.DataFrame(missing_list,columns=group2.columns)

  group3 = group2.append(missing)
  group3.base_date=pd.to_datetime(group3.base_date)
  group3 = group3.sort_values(by=['base_date','city','emd_nm']).reset_index(drop=True)

  dates = pd.date_range('2020-06-25', periods=4, freq='D').strftime("%Y-%m-%d").tolist()
  dates_list=[]
  for i in range(len(dates)):
    dates_list.append(dates[i])

  missing_emd_이호동 = ['이호동','한림읍','애월읍','구좌읍','한경면']
  missing_list=[]
  for j in range(len(missing_emd_이호동)):
    for i in range(len(dates_list)):
      missing_list.append([dates_list[i],'제주시',missing_emd_이호동[j],np.NaN,np.NaN,np.NaN])
  missing = pd.DataFrame(missing_list,columns=group3.columns)

  group4 = group3.append(missing)
  group4.base_date=pd.to_datetime(group4.base_date)
  group4 = group4.sort_values(by=['base_date','city','emd_nm']).reset_index(drop=True)

  name = food_waste[food_waste['emd_nm']!="알수없음"]['emd_nm'].unique()

  for i in range(len(name)):
      globals()['group4{}'.format(name[i])]=group4[group4['emd_nm']==name[i]]
      globals()['group4{}_re'.format(name[i])] = globals()['group4{}'.format(name[i])].reset_index()
      globals()['group4{}_re'.format(name[i])]['base_date'] = pd.to_datetime(globals()['group4{}_re'.format(name[i])]['base_date'])
      globals()['group4{}_re'.format(name[i])] = globals()['group4{}_re'.format(name[i])].set_index(['base_date'])

      globals()['group4{}_add'.format(name[i])] = globals()['group4{}_re'.format(name[i])]['em_cnt'].interpolate(method = 'time')
      globals()['group4{}_add_frame'.format(name[i])] = globals()['group4{}_add'.format(name[i])].to_frame()
      globals()['group4{}'.format(name[i])] = globals()['group4{}'.format(name[i])].reset_index(drop=True)
      list = globals()['group4{}'.format(name[i])].loc[globals()['group4{}'.format(name[i])].isnull()["em_cnt"]].index.tolist()
      for j in range(len(globals()['group4{}'.format(name[i])])):
        if j in list:
          globals()['group4{}'.format(name[i])]['em_cnt'][j] = globals()['group4{}_add_frame'.format(name[i])].iloc[j]
      
      globals()['group4{}_add'.format(name[i])] = globals()['group4{}_re'.format(name[i])]['em_g'].interpolate(method = 'time')
      globals()['group4{}_add_frame'.format(name[i])] = globals()['group4{}_add'.format(name[i])].to_frame()
      globals()['group4{}'.format(name[i])] = globals()['group4{}'.format(name[i])].reset_index(drop=True)
      list = globals()['group4{}'.format(name[i])].loc[globals()['group4{}'.format(name[i])].isnull()["em_g"]].index.tolist()
      for j in range(len(globals()['group4{}'.format(name[i])])):
        if j in list:
          globals()['group4{}'.format(name[i])]['em_g'][j] = globals()['group4{}_add_frame'.format(name[i])].iloc[j]

      globals()['group4{}_add'.format(name[i])] = globals()['group4{}_re'.format(name[i])]['pay_amt'].interpolate(method = 'time')
      globals()['group4{}_add_frame'.format(name[i])] = globals()['group4{}_add'.format(name[i])].to_frame()
      globals()['group4{}'.format(name[i])] = globals()['group4{}'.format(name[i])].reset_index(drop=True)
      list = globals()['group4{}'.format(name[i])].loc[globals()['group4{}'.format(name[i])].isnull()["pay_amt"]].index.tolist()
      for j in range(len(globals()['group4{}'.format(name[i])])):
        if j in list:
          globals()['group4{}'.format(name[i])]['pay_amt'][j] = globals()['group4{}_add_frame'.format(name[i])].iloc[j]

  list_all = group4.loc[group4.isnull()["em_cnt"]].index.tolist()
  for i in range(len(list_all)):
    for nm in name:
      for j in range(len(globals()['group4{}'.format(nm)])):
        if group4['emd_nm'][list_all[i]] == nm:
          if group4['base_date'][list_all[i]] == globals()['group4{}'.format(nm)]['base_date'][j]:
            group4['em_cnt'][list_all[i]] = globals()['group4{}'.format(nm)]['em_cnt'][j]

  list_all = group4.loc[group4.isnull()["em_g"]].index.tolist()
  for i in range(len(list_all)):
    for nm in range(len(name)):
      for j in range(len(globals()['group4{}'.format(name[nm])])):
        if group4['emd_nm'][list_all[i]] == name[nm]:
          if group4['base_date'][list_all[i]] == globals()['group4{}'.format(name[nm])]['base_date'][j]:
            group4['em_g'][list_all[i]] = globals()['group4{}'.format(name[nm])]['em_g'][j]

  list_all = group4.loc[group4.isnull()["pay_amt"]].index.tolist()
  for i in range(len(list_all)):
    for nm in range(len(name)):
      for j in range(len(globals()['group4{}'.format(name[nm])])):
        if group4['emd_nm'][list_all[i]] == name[nm]:
          if group4['base_date'][list_all[i]] == globals()['group4{}'.format(name[nm])]['base_date'][j]:
            group4['pay_amt'][list_all[i]] = globals()['group4{}'.format(name[nm])]['pay_amt'][j]

  import copy
  food_waste_missing = group4
  food_waste = copy.deepcopy(group4)

  korean = pd.read_csv(os.path.join('..','raw', '제공데이터', '02-1_내국인유동인구_KOREAN.CSV'), encoding='CP949', 
                      usecols=['base_date', 'emd_nm', 'sex', 'age', 'resd_pop_cnt'])
  korean = korean[korean['resd_pop_cnt']!=0]
  korean = korean[~korean['emd_nm'].isin(['우도면', '추자면'])]
  korean = korean.groupby(['base_date', 'emd_nm', 'sex', 'age'])["resd_pop_cnt"].max()
  korean = pd.DataFrame(korean)
  korean.reset_index(inplace=True)

  for i in range(0,90,10):
    globals()['fe_{}'.format(i)] = korean[(korean['sex']=='여성') & (korean['age']==i)]
    globals()['fe_{}'.format(i)].reset_index(drop=True, inplace=True)
    globals()['fe_{}'.format(i)].set_index(['base_date','emd_nm'], inplace=True)
    globals()['fe_{}'.format(i)].sort_index(inplace=True)

  for i in range(0,90,10):
    globals()['mal_{}'.format(i)] = korean[(korean['sex']=='남성') & (korean['age']==i)]
    globals()['mal_{}'.format(i)].reset_index(drop=True, inplace=True)
    globals()['mal_{}'.format(i)].set_index(['base_date','emd_nm'], inplace=True)
    globals()['mal_{}'.format(i)].sort_index(inplace=True)

  col = []

  for i in range(0, 90, 10):
    col.append('fe_'+str(i)+'_resd')
    col.append('mal_'+str(i)+'_resd')

  korean_basic = pd.concat([korean['base_date'], korean['emd_nm']], axis=1)
  korean_basic.drop_duplicates(['base_date', 'emd_nm'], inplace=True, keep = 'first', ignore_index = True)
  df = pd.DataFrame(index=range(len(korean_basic)), columns=col)

  korean_basic = pd.concat([korean_basic, df], axis=1)
  korean_basic.reset_index(drop=True, inplace=True)
  korean_basic.set_index(['base_date','emd_nm'], inplace=True) 
  korean_basic.sort_index(inplace=True)

  for i in range(0,90,10):
    korean_basic['fe_'+str(i)+'_resd'] = globals()['fe_{}'.format(i)]['resd_pop_cnt']

  for i in range(0,70,10):
    korean_basic['mal_'+str(i)+'_resd'] = globals()['mal_{}'.format(i)]['resd_pop_cnt']

  for i in range(0, len(mal_70)):
    korean_basic.loc[mal_70.index[i], 'mal_70_resd'] = mal_70['resd_pop_cnt'][i]

  for i in range(0, len(mal_80)):
    korean_basic.loc[mal_80.index[i], 'mal_80_resd'] = mal_80['resd_pop_cnt'][i]

  missing_values_table(korean_basic)

  # 단위 횟수별 배출량 변수 'em_g_per_cnt' 변수 생성
  food_waste['em_g_per_cnt'] = food_waste['em_g']/food_waste['em_cnt']

  # 세부적인 날짜 변수('연','월','일','주','요일','계절') 생성
  food_waste['base_date'] = pd.to_datetime(food_waste['base_date'])
  food_waste['year'] = food_waste['base_date'].dt.year
  food_waste['month'] = food_waste['base_date'].dt.month
  food_waste['day'] = food_waste['base_date'].dt.day
  food_waste['week'] = food_waste['base_date'].dt.week
  food_waste['day_of_week'] = food_waste['base_date'].dt.weekday # 월요일 = 0
  food_waste['month'] = food_waste['month'].astype(str)
  mapping = {"3" : 0, "4" : 0, "5" : 0, "6" : 1, "7" : 1, "8" : 1, "9" : 2, "10" : 2, "11" : 2, "12" : 3, "1" : 3, "2" : 3}   # 봄 = 0
  food_waste['season'] = food_waste['month'].replace(mapping).astype(int)
  food_waste['month'] = food_waste['month'].astype(int)

  # 공휴일 더미변수 생성 (공휴일인 경우 1, 아닌 경우 0)
  red2018 = getHoliday(2018)
  red2019 = getHoliday(2019)
  red2020 = getHoliday(2020)
  red2021 = getHoliday(2021)
  redday = pd.concat([red2018, red2019, red2020, red2021], axis=0)
  redday.reset_index(drop=True, inplace=True)
  del red2018, red2019, red2020, red2021
  df = pd.DataFrame(index=range(0,len(food_waste)), columns=['redday'])
  food_waste = pd.concat([food_waste, df], axis=1)
  food_waste['redday'] = food_waste['redday'].fillna(0)
  food_waste.reset_index(drop=True, inplace=True)
  for i in range(len(food_waste)):
      for j in range(len(redday)):
          diff = abs((redday['날짜'][j]-food_waste['base_date'][i]).days)                
          if food_waste['redday'][i] == 0:
              if (diff == 0) | (diff == 1):
                  food_waste['redday'][i] = 1
  del redday

  # 카드 소비 데이터 - 결제 건수 및 결제량 변수 (뷔페, 주점 제외)
  
  card_spending = pd.read_csv(os.path.join('..','raw', '제공데이터', '04_음식관련 카드소비_CARD_SPENDING.CSV'), encoding='CP949')
  card_spending=card_spending[card_spending['emd_nm'] != '우도면']
  card_spending=card_spending[card_spending['emd_nm'] != '추자면']

  kor = card_spending[card_spending['mct_cat_nm']=='한식']
  kor.reset_index(drop=True, inplace=True)

  fast = card_spending[card_spending['mct_cat_nm']=='패스트푸드']
  fast.reset_index(drop=True, inplace=True)

  af = card_spending[card_spending['mct_cat_nm']=='농축수산물']
  af.reset_index(drop=True, inplace=True)

  mart = card_spending[card_spending['mct_cat_nm']=='마트/슈퍼마켓']
  mart.reset_index(drop=True, inplace=True)

  food = card_spending[card_spending['mct_cat_nm']=='식품']
  food.reset_index(drop=True, inplace=True)

  west = card_spending[card_spending['mct_cat_nm']=='양식']
  west.reset_index(drop=True, inplace=True)

  des = card_spending[card_spending['mct_cat_nm']=='간식']
  des.reset_index(drop=True, inplace=True)

  asia = card_spending[card_spending['mct_cat_nm']=='아시아음식']
  asia.reset_index(drop=True, inplace=True)

  deliv = card_spending[card_spending['mct_cat_nm']=='배달']
  deliv.reset_index(drop=True, inplace=True)

  col = ['kor_cnt', 'kor_amt', 'fast_cnt', 'fast_amt', 'af_cnt', 'af_amt', 'mart_cnt', 'mart_amt', 
        'food_cnt', 'food_amt', 'west_cnt', 'west_amt', 'des_cnt', 'des_amt', 'asia_cnt', 'asia_amt', 'deliv_cnt', 'deliv_amt']

  basic = pd.concat([food_waste['base_date'], food_waste['emd_nm']], axis=1)
  basic.drop_duplicates(['base_date', 'emd_nm'], inplace=True, keep = 'first', ignore_index = True)
  df = pd.DataFrame(index=range(len(basic)), columns=col)
  # df[col] = df[col].fillna(0)

  basic = pd.concat([basic, df], axis=1)
  basic.reset_index(drop=True, inplace=True)

  cnt = 0
  for i in range(0, len(kor)):
    try:
      tmp = basic[(basic['base_date'] == kor['base_date'][i]) & (basic['emd_nm'] == kor['emd_nm'][i])].index[0]
      basic['kor_cnt'].loc[tmp] = kor['use_cnt'][i]
      basic['kor_amt'].loc[tmp] = kor['use_amt'][i]
    except:
      cnt += 1
  print("한식 에러 횟수 : ", cnt)

  cnt = 0
  for i in range(0, len(fast)):
    try : 
      tmp = basic[(basic['base_date'] == fast['base_date'][i]) & (basic['emd_nm'] == fast['emd_nm'][i])].index[0]
      basic['fast_cnt'].loc[tmp] = fast['use_cnt'][i]
      basic['fast_amt'].loc[tmp] = fast['use_amt'][i]
    except:
      cnt += 1

  print("패스트푸드 에러 횟수 : ", cnt)

  cnt = 0
  for i in range(0, len(af)):
    try : 
      tmp = basic[(basic['base_date'] == af['base_date'][i]) & (basic['emd_nm'] == af['emd_nm'][i])].index[0]
      basic['af_cnt'].loc[tmp] = af['use_cnt'][i]
      basic['af_amt'].loc[tmp] = af['use_amt'][i]
    except:
      cnt += 1
  print("농축수산물 에러 횟수 : ", cnt)

  cnt = 0
  for i in range(0, len(mart)):
    try :
      tmp = basic[(basic['base_date'] == mart['base_date'][i]) & (basic['emd_nm'] == mart['emd_nm'][i])].index[0]
      basic['mart_cnt'].loc[tmp] = mart['use_cnt'][i]
      basic['mart_amt'].loc[tmp] = mart['use_amt'][i]
    except:
      cnt += 1
  print("마트 에러 횟수 : ", cnt)

  cnt = 0
  for i in range(0, len(food)):
    try :
      tmp = basic[(basic['base_date'] == food['base_date'][i]) & (basic['emd_nm'] == food['emd_nm'][i])].index[0]
      basic['food_cnt'].loc[tmp] = food['use_cnt'][i]
      basic['food_amt'].loc[tmp] = food['use_amt'][i]
    except:
      cnt += 1
  print("식품 에러 횟수 : ", cnt)

  cnt = 0
  for i in range(0, len(west)):
    try : 
      tmp = basic[(basic['base_date'] == west['base_date'][i]) & (basic['emd_nm'] == west['emd_nm'][i])].index[0]
      basic['west_cnt'].loc[tmp] = west['use_cnt'][i]
      basic['west_amt'].loc[tmp] = west['use_amt'][i]
    except:
      cnt += 1
  print("양식 에러 횟수 : ", cnt)

  cnt = 0
  for i in range(0, len(des)):
    try : 
      tmp = basic[(basic['base_date'] == des['base_date'][i]) & (basic['emd_nm'] == des['emd_nm'][i])].index[0]
      basic['des_cnt'].loc[tmp] = des['use_cnt'][i]
      basic['des_amt'].loc[tmp] = des['use_amt'][i]
    except:
      cnt += 1
  print("디저트 에러 횟수 : ", cnt)

  cnt = 0
  for i in range(0, len(asia)):
    try:
      tmp = basic[(basic['base_date'] == asia['base_date'][i]) & (basic['emd_nm'] == asia['emd_nm'][i])].index[0]
      basic['asia_cnt'].loc[tmp] = asia['use_cnt'][i]
      basic['asia_amt'].loc[tmp] = asia['use_amt'][i]
    except:
      cnt += 1
  print("아시아음식 에러 횟수 : ", cnt)

  cnt = 0
  for i in range(0, len(deliv)):
    try : 
      tmp = basic[(basic['base_date'] == deliv['base_date'][i]) & (basic['emd_nm'] == deliv['emd_nm'][i])].index[0]
      basic['deliv_cnt'].loc[tmp] = deliv['use_cnt'][i]
      basic['deliv_amt'].loc[tmp] = deliv['use_amt'][i]
    except:
      cnt += 1
  print("배달음식 에러 횟수 : ", cnt)

  food_waste = pd.merge(left=food_waste, right=basic, how='left', \
                    on=['base_date','emd_nm'], sort=True)

  del card_spending, kor, fast, af, mart, food, west, des, asia, deliv

  korean_basic.reset_index(inplace=True)

  # 유동인구 데이터에서 성별/연령대 변수 생성
  korean_basic['base_date']=pd.to_datetime(korean_basic['base_date'])
  korean = korean_basic
  food_waste = pd.merge(left=food_waste, right=korean, how='left', \
                    on=['base_date','emd_nm'], sort=True)
  del korean

  #주택 변수 (단독/아파트/연립/다세대 - 2020년 기준)
  
  house = pd.read_csv(os.path.join('..','raw', '외부데이터', '인구__가구_및_주택__읍면동_2015_2020___시군구_20162019__20210822212745.csv'), encoding='CP949', header=None, skiprows = 4)
  house.columns = ['emd_nm', 'single_house', 'apartment', 'small_apartment', 'multi-household_house']
  house.set_index('emd_nm', inplace=True)

  df = pd.DataFrame(index=range(len(food_waste)), columns=['single_house', 'apartment', 'small_apartment', 'multi-household_house'])
  food_waste = pd.concat([food_waste, df], axis=1)
  food_waste.reset_index(drop=True, inplace=True)
  food_waste.set_index('emd_nm', inplace=True)

  for i in range(0, len(house)):
    food_waste.loc[house.index[i], 'single_house'] = house['single_house'][i]
    food_waste.loc[house.index[i], 'apartment'] = house['apartment'][i]
    food_waste.loc[house.index[i], 'small_apartment'] = house['small_apartment'][i]
    food_waste.loc[house.index[i], 'multi-household_house'] = house['multi-household_house'][i]

  food_waste.reset_index(inplace=True)

  del house

  # 가구 변수(1인, 2인, ... , 7인 이상 - 2020년 기준)
  
  household = pd.read_csv(os.path.join('..','raw', '외부데이터', '가구원수별_가구_일반가구___읍면동_2015_2020___시군구_20162019__20210823014136.csv'), encoding = 'CP949', header=None, skiprows = 2)
  household.columns = ['emd_nm', '1_people', '2_people', '3_people', '4_people', '5_people', '6_people', '7_people']
  household.set_index('emd_nm', inplace=True)

  df = pd.DataFrame(index=range(len(food_waste)), columns=['1_people', '2_people', '3_people', '4_people', '5_people', '6_people', '7_people'])
  food_waste = pd.concat([food_waste, df], axis=1)
  food_waste.reset_index(drop=True, inplace=True)
  food_waste.set_index('emd_nm', inplace=True)

  for i in range(0, len(household)):
    food_waste.loc[household.index[i], '1_people'] = household['1_people'][i]
    food_waste.loc[household.index[i], '2_people'] = household['2_people'][i]
    food_waste.loc[household.index[i], '3_people'] = household['3_people'][i]
    food_waste.loc[household.index[i], '4_people'] = household['4_people'][i]
    food_waste.loc[household.index[i], '5_people'] = household['5_people'][i]
    food_waste.loc[household.index[i], '6_people'] = household['6_people'][i]
    food_waste.loc[household.index[i], '7_people'] = household['7_people'][i]

  food_waste.reset_index(inplace=True)

  del household

  # 지역 대비 유동인구 변수 (거주 / 방문 / 일 / 보류)
  food_waste['geo_type'] = "보류"

  food_waste.loc[food_waste['emd_nm'].isin(['건입동','봉개동','영천동','용담2동','이도1동','일도1동','정방동','중앙동','천지동']), 'geo_type'] = "방문"
  food_waste.loc[food_waste['emd_nm'].isin(['구좌읍','노형동','대정읍','동홍동','삼양동','성산읍','아라동','안덕면','연동','외도동','이도2동','이호동','일도2동','조천읍','표선면','한림읍','화북동','효돈동']), 'geo_type'] = "거주"
  food_waste.loc[food_waste['emd_nm'].isin(['알수없음']), 'geo_type'] = "알수없음"

  # # 시계열 분해를 통해 파생 변수
  from statsmodels.tsa.seasonal import seasonal_decompose

  geo = sorted(food_waste['emd_nm'].unique())
  df = pd.DataFrame(index=range(len(food_waste)), columns=['observed', 'trend', 'seasonal'])
  food_waste = pd.concat([food_waste, df], axis=1)
  food_waste.reset_index(drop=True, inplace=True)
  food_waste.set_index(['emd_nm', 'base_date'], inplace=True)

  # 계절적 성분 30일로 가정
  # extrapolate_trend='freq' : Trend 성분을 만들기 위한 rolling window 때문에 필연적으로 trend, resid에는 Nan 값이 발생하기 때문에, 이 NaN값을 채워주는 옵션이다.
  for i in geo:
    tmp = food_waste.loc[i]
    result = seasonal_decompose(tmp.em_g, model='additive', two_sided=True, extrapolate_trend='freq', freq=30) 

    date = pd.DataFrame(tmp.index)
    Observed = pd.DataFrame(result.observed.values)
    Trend = pd.DataFrame(result.trend.values)
    Seasonal = pd.DataFrame(result.seasonal.values)

    print(i)
    print(len(date))
    print(len(Observed))
    print(len(Trend))
    print(len(Seasonal))

    globals()['geotime_{}'.format(i)] = pd.concat([date, Observed, Trend, Seasonal], axis=1, ignore_index=True)
    globals()['geotime_{}'.format(i)].columns = ['base_date', 'Observed', 'Trend', 'Seasonal']
    globals()['geotime_{}'.format(i)].reset_index(drop=True, inplace=True)
    globals()['geotime_{}'.format(i)].set_index(['base_date'], inplace=True)

    for j in range(0, len(globals()['geotime_{}'.format(i)])):
      food_waste.loc[(i, globals()['geotime_{}'.format(i)].index[j]), 'observed'] = globals()['geotime_{}'.format(i)]['Observed'][j]
      food_waste.loc[(i, globals()['geotime_{}'.format(i)].index[j]), 'trend'] = globals()['geotime_{}'.format(i)]['Trend'][j]
      food_waste.loc[(i, globals()['geotime_{}'.format(i)].index[j]), 'seasonal'] = globals()['geotime_{}'.format(i)]['Seasonal'][j]

  food_waste.reset_index(inplace=True)

  # 전일 대비 음식물쓰레기 배출량/건수/지불금액/단위금액 변화량 변수
  df = food_waste[['base_date', 'emd_nm', 'em_cnt', 'em_g', 'pay_amt', 'em_g_per_cnt']]
  df['em_cnt_variant'] = 0
  df['em_g_variant'] = 0
  df['pay_amt_variant'] = 0
  df['em_g_per_cnt_variant'] = 0
  df.set_index(['emd_nm', 'base_date'], inplace=True)

  for i in geo:
    globals()['geovariant_{}'.format(i)] = df.loc[i]
    globals()['geovariant_{}'.format(i)].reset_index(inplace=True)
    
    for j in range(1, len(globals()['geovariant_{}'.format(i)])):
      globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j], 'em_cnt_variant'] = (globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j], 'em_cnt']
                                                                                                                  - globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j-1], 'em_cnt'])
      globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j], 'em_g_variant'] = (globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j], 'em_g']
                                                                                                                  - globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j-1], 'em_g'])
      globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j], 'pay_amt_variant'] = (globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j], 'pay_amt']
                                                                                                                  - globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j-1], 'pay_amt'])
      globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j], 'em_g_per_cnt_variant'] = (globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j], 'em_g_per_cnt']
                                                                                                                  - globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[j-1], 'em_g_per_cnt'])

    globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[0], 'em_cnt_variant'] = globals()['geovariant_{}'.format(i)]['em_cnt_variant'].mean()
    globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[0], 'em_g_variant'] = globals()['geovariant_{}'.format(i)]['em_g_variant'].mean()
    globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[0], 'pay_amt_variant'] = globals()['geovariant_{}'.format(i)]['pay_amt_variant'].mean()
    globals()['geovariant_{}'.format(i)].loc[globals()['geovariant_{}'.format(i)].index[0], 'em_g_per_cnt_variant'] = globals()['geovariant_{}'.format(i)]['em_g_per_cnt_variant'].mean()

    globals()['geovariant_{}'.format(i)].set_index(['base_date'], inplace=True)

    for k in range(0, len(globals()['geovariant_{}'.format(i)])):
      df.loc[(i, globals()['geovariant_{}'.format(i)].index[k]), 'em_cnt_variant'] = globals()['geovariant_{}'.format(i)]['em_cnt_variant'][k]
      df.loc[(i, globals()['geovariant_{}'.format(i)].index[k]), 'em_g_variant'] = globals()['geovariant_{}'.format(i)]['em_g_variant'][k]
      df.loc[(i, globals()['geovariant_{}'.format(i)].index[k]), 'pay_amt_variant'] = globals()['geovariant_{}'.format(i)]['pay_amt_variant'][k]
      df.loc[(i, globals()['geovariant_{}'.format(i)].index[k]), 'em_g_per_cnt_variant'] = globals()['geovariant_{}'.format(i)]['em_g_per_cnt_variant'][k]

  for i in geo:
    # globals()['geovariant_{}'.format(i)].set_index(['base_date'], inplace=True)
    for k in range(0, len(globals()['geovariant_{}'.format(i)])):
      df.loc[(i, globals()['geovariant_{}'.format(i)].index[k]), 'em_cnt_variant'] = globals()['geovariant_{}'.format(i)]['em_cnt_variant'][k]
      df.loc[(i, globals()['geovariant_{}'.format(i)].index[k]), 'em_g_variant'] = globals()['geovariant_{}'.format(i)]['em_g_variant'][k]
      df.loc[(i, globals()['geovariant_{}'.format(i)].index[k]), 'pay_amt_variant'] = globals()['geovariant_{}'.format(i)]['pay_amt_variant'][k]
      df.loc[(i, globals()['geovariant_{}'.format(i)].index[k]), 'em_g_per_cnt_variant'] = globals()['geovariant_{}'.format(i)]['em_g_per_cnt_variant'][k]

  df.reset_index(inplace=True)
  df.drop(['em_cnt', 'em_g', 'pay_amt', 'em_g_per_cnt'], axis=1, inplace=True)
  food_waste = pd.merge(left=food_waste, right=df, how='left', \
                    on=['base_date','emd_nm'], sort=True)

  food_waste_known = food_waste[food_waste['emd_nm'] != '알수없음']
  food_waste_unknown = food_waste[food_waste['emd_nm'] == '알수없음']

  mal_70_resd_missing = food_waste_known[food_waste_known['mal_70_resd'].isnull()].index
  mal_80_resd_missing = food_waste_known[food_waste_known['mal_80_resd'].isnull()].index

  for i in mal_70_resd_missing:
    food_waste_known.loc[i, 'mal_70_resd'] = food_waste_known['mal_70_resd'].mean()

  for i in mal_80_resd_missing:
    food_waste_known.loc[i, 'mal_80_resd'] = food_waste_known['mal_80_resd'].mean()

  food_waste_unknown.dropna(how='all', axis=1, inplace=True)

  food_waste.to_csv(os.path.join('..','preprocess', 'add_missing_total_data_final.csv'), index=False)
  food_waste_known.to_csv(os.path.join('..','preprocess', 'add_missing_total_data_final_known.csv'), index=False)
  food_waste_unknown.to_csv(os.path.join('..','preprocess', 'total_data_final_unknown_end.csv'), index=False)